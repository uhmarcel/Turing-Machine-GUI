{"version":3,"sources":["Components/Display.js","Components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","background","color","font","displayArea","letterSpacing","border","outputText","Display","react_default","a","createElement","Container","fluid","style","className","Input","type","name","spellcheck","defaultValue","Component","buttonStyles","padding","borderRadius","width","marginBottom","editorStyles","overflowY","panelStyles","paddingTop","paddingBottom","Editor","Button","index_es","icon","faUndoAlt","faArrowLeft","faArrowRight","Object","objectSpread","paddingLeft","faPlay","faFastForward","App","Components_Display","Components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAGMA,EAAS,CACXC,OAAQ,OACRC,WAAY,UACZC,MAAO,OACPC,KAAM,QAGJC,EAAc,CAChBD,KAAM,iBACNE,cAAe,MACfL,OAAQ,OACRM,OAAQ,QAGNC,EAAa,CACfJ,KAAM,kBAmBKK,mLAbP,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAOf,EAAQgB,UAAU,6BACtCN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACXN,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,YAAYC,WAAW,QAAQJ,UAAU,aAAaD,MAAOV,EAAagB,aAAa,kBAC/GX,EAAAC,EAAAC,cAAA,QAAMI,UAAU,YAAYD,MAAOP,GAAnC,0BAREc,2CChBhBtB,EAAS,CACXC,OAAQ,sBAGNsB,EAAe,CACjBC,QAAS,UACTC,aAAc,MACdtB,MAAO,OACPuB,MAAO,OACPzB,OAAQ,OACR0B,aAAc,OAGZC,EAAe,CACjBxB,KAAM,gBACNsB,MAAO,OACPG,UAAW,SACXtB,OAAQ,QAGNuB,EAAc,CAChB7B,OAAQ,OACR8B,WAAY,MACZC,cAAe,OA4CJC,mLAtCP,OACIvB,EAAAC,EAAAC,cAAA,OAAKG,MAAOf,GACRU,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBAAkBD,MAAOe,GACpCpB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,QAAMI,UAAU,eACZN,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQ/B,MAAM,QAAQY,MAAOQ,GAAcb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBC,KAAMC,OAAsB,KACxF3B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQ/B,MAAM,QAAQY,MAAOQ,GAAcb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBC,KAAME,OAAwB,KAC1F5B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQ/B,MAAM,QAAQY,MAAOQ,GAAcb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBC,KAAMG,OAAyB,KAC3F7B,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQ/B,MAAM,QAAQY,MAAKyB,OAAAC,EAAA,EAAAD,CAAA,GAAMjB,EAAN,CAAoBmB,YAAY,SAAQhC,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBC,KAAMO,IAAQ5B,MAAO,CAACd,OAAQ,WAAoB,KACtIS,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQ/B,MAAM,QAAQY,MAAOQ,GAAcb,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAiBC,KAAMQ,SAG1ElC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SAASD,MAAO,CAACd,OAAO,qBAAvC,IACIS,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,WAAWE,WAAW,QAAQL,MAAOa,EAAcP,aAAa,uiBAhB3EC,mBCfNuB,MAVf,WACE,OACEnC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACkC,EAAD,MAEApC,EAAAC,EAAAC,cAACmC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6fff876f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Input, Label, FormGroup, FormText } from 'reactstrap';\r\n\r\nconst styles = {\r\n    height: '90px',\r\n    background: '#90a4be',\r\n    color: '#111',\r\n    font: '10px',\r\n}\r\n\r\nconst displayArea = {\r\n    font: '14px monospace',\r\n    letterSpacing: '1px',\r\n    height: '28px',\r\n    border: 'none'\r\n}\r\n\r\nconst outputText = {\r\n    font: '12px monospace'\r\n}\r\n\r\nclass Display extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid style={styles} className='d-flex align-items-center' >\r\n                <div className='w-100'>\r\n                    <h6>Turing Machine Simulator</h6>\r\n                    <Input type='text' name='tmDisplay' spellcheck='false' className='w-100 mt-0' style={displayArea} defaultValue='#10101001#11#'/>\r\n                    <span className='container' style={outputText}>Output: 11101</span>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Display","import React, { Component, Fragment } from 'react';\r\nimport { Input, Container, Row, Col, Button, Label } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUndoAlt, faArrowLeft, faArrowRight, faPlay, faFastForward } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst styles = {\r\n    height: 'calc(100vh - 90px)'\r\n}\r\n\r\nconst buttonStyles = {\r\n    padding: '2px 6px',\r\n    borderRadius: '50%',\r\n    color: \"#667\",\r\n    width: '30px',\r\n    height: '30px',\r\n    marginBottom: '1px'\r\n}\r\n\r\nconst editorStyles = {\r\n    font: '12px Consolas',\r\n    width: '100%',\r\n    overflowY: 'scroll',\r\n    border: 'none'\r\n}\r\n\r\nconst panelStyles = {\r\n    height: '40px',\r\n    paddingTop: '6px',\r\n    paddingBottom: '3px'\r\n}\r\n\r\nclass Editor extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={styles}>\r\n                <div className='container-fluid' style={panelStyles}>\r\n                    <spam>Editor</spam>\r\n                    <spam className='float-right'>\r\n                        <Button color='light' style={buttonStyles}><FontAwesomeIcon icon={faUndoAlt}/></Button>{'  '}\r\n                        <Button color='light' style={buttonStyles}><FontAwesomeIcon icon={faArrowLeft}/></Button>{'  '}\r\n                        <Button color='light' style={buttonStyles}><FontAwesomeIcon icon={faArrowRight}/></Button>{'  '}\r\n                        <Button color='light' style={{...buttonStyles, paddingLeft:'8px'}}><FontAwesomeIcon icon={faPlay} style={{height: '15px'}}/></Button>{'  '}\r\n                        <Button color='light' style={buttonStyles}><FontAwesomeIcon icon={faFastForward}/></Button>    \r\n                    </spam>\r\n                </div>\r\n                <div className='d-flex' style={{height:'calc(100% - 55px'}}> {/*50px*/}\r\n                    <Input type=\"textarea\" spellcheck=\"false\" style={editorStyles} defaultValue=\"# Multiply TM program\r\n# Outputs the multiplication of two inputs on alphabet {1}*\r\n\r\n# For each multiplicand, copy input to end of tape\r\nq0]r (#, q1)\r\nq1]r (1/M, q2) (#, q8)    # Mark current multiplicand, and copy input\r\nq2]l (#, q3)\r\n\r\n# Copy first input at end of tape\r\nq3]l (1/X, q4) (#, q0)    # Mark current char being copied\r\nq4]r (#, q5)        \r\nq5]r (#, q6)\r\nq6]r (#/1, q7)\r\nq7]l (X/1, q3)            # Remove mark and recover\r\n\r\n# All multiplicands processed, finish \r\nq8]l (M/1, q8) (#, q9)\r\nq9]r (#, q-1)\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Editor","import React from 'react';\nimport Display from './Components/Display';\nimport Editor from './Components/Editor';\nimport './App.css'\n\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Display/>\n      {/* <hr/> */}\n      <Editor/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}