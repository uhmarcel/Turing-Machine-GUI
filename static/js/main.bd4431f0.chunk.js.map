{"version":3,"sources":["Custom-mode/tm-custom.js","Components/Display.js","Components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","codemirror__WEBPACK_IMPORTED_MODULE_0__","codemirror__WEBPACK_IMPORTED_MODULE_0___default","n","CodeMirror","defineSimpleMode","start","regex","token","meta","lineComment","styles","height","background","color","font","displayArea","letterSpacing","border","outputText","Display","react_default","a","createElement","Container","fluid","style","className","Input","type","name","spellCheck","defaultValue","Component","require","Editor","state","code","updateCode","_callee","editor","data","regenerator_default","wrap","_context","prev","next","_this","setState","stop","Button","index_es","icon","faUndoAlt","faArrowLeft","faArrowRight","paddingLeft","faPlay","faFastForward","react_codemirror2","value","this","onBeforeChange","options","mode","theme","lineNumbers","App","Components_Display","Components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd4431f0.chunk.js","sourcesContent":["import CodeMirror from 'codemirror';\r\nimport 'codemirror/addon/mode/simple'\r\n\r\n\r\nCodeMirror.defineSimpleMode(\"tm-custom\", {\r\n    start: [\r\n      {\r\n        regex: /^(q[0-9]+])\\s*([rl])/, \r\n        token: [\"tag   \", \"atom  \"]\r\n      },\r\n      {\r\n        regex: /\\(\\s*(?:.\\s*\\/\\s*.\\s*|.\\s*),\\s*(q-?[0-9]+)\\s*\\)/,\r\n        token: [\"attribute  \"]\r\n      },\r\n      {\r\n        regex: /#.*/, \r\n        token: \"comment\"\r\n      } \r\n    ],\r\n    meta: {\r\n      lineComment: \"#\"\r\n    }\r\n  });\r\n  ","import React, { Component } from 'react';\r\nimport { Container, Input, Label, FormGroup, FormText } from 'reactstrap';\r\n\r\nconst styles = {\r\n    height: '90px',\r\n    background: '#90a4be',\r\n    color: '#111',\r\n    font: '10px'\r\n}\r\n\r\nconst displayArea = {\r\n    font: '14px monospace',\r\n    letterSpacing: '1px',\r\n    height: '28px',\r\n    border: 'none'\r\n}\r\n\r\nconst outputText = {\r\n    font: '12px monospace'\r\n}\r\n\r\nclass Display extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid style={styles} className='d-flex align-items-center' >\r\n                <div className='w-100'>\r\n                    <h6>Turing Machine Simulator</h6>\r\n                    <Input type='text' name='tmDisplay' spellCheck='false' className='w-100 mt-0' style={displayArea} defaultValue='#10101001#11#'/>\r\n                    <span className='container' style={outputText}>Output: 11101</span>\r\n                </div>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Display","import React, { Component, Fragment } from 'react';\r\nimport { Input, Container, Row, Col, Button, Label } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faUndoAlt, faArrowLeft, faArrowRight, faPlay, faFastForward } from '@fortawesome/free-solid-svg-icons';\r\nimport { Controlled as CodeMirror} from 'react-codemirror2';\r\n\r\nrequire('codemirror/lib/codemirror.css');\r\nrequire('codemirror/theme/xq-light.css');\r\nrequire('../Custom-mode/tm-custom.js');\r\n\r\nrequire('./Editor.css');\r\n\r\nclass Editor extends Component {\r\n\r\n    state = {\r\n        code:     \r\n`# Multiply TM program\r\n# Outputs the multiplication of two inputs on alphabet {1}*\r\n\r\n# For each multiplicand, copy input to end of tape\r\nq0]r (#, q1)\r\nq1]r (1/M, q2) (#, q8)    # Mark current multiplicand, and copy input\r\nq2]l (#, q3)\r\n\r\n# Copy first input at end of tape\r\nq3]l (1/X, q4) (#, q0)    # Mark current char being copied\r\nq4]r (#, q5)        \r\nq5]r (#, q6)\r\nq6]r (#/1, q7)\r\nq7]l (X/1, q3)            # Remove mark and recover\r\n\r\n# All multiplicands processed, finish \r\nq8]l (M/1, q8) (#, q9)\r\nq9]r (#, q-1)`\r\n    }\r\n\r\n    updateCode = async (editor, data, code) => {\r\n        this.setState({code});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='container-fluid EditorPanel'>\r\n                    <span>Editor</span>\r\n                    <div className='float-right'>\r\n                        <Button color='light' className='EditorButton'><FontAwesomeIcon icon={faUndoAlt}/></Button>{'  '}\r\n                        <Button color='light' className='EditorButton'><FontAwesomeIcon icon={faArrowLeft}/></Button>{'  '}\r\n                        <Button color='light' className='EditorButton'><FontAwesomeIcon icon={faArrowRight}/></Button>{'  '}\r\n                        <Button color='light' className='EditorButton' style={{paddingLeft:'8px'}}><FontAwesomeIcon icon={faPlay} style={{height: '15px'}}/></Button>{'  '}\r\n                        <Button color='light' className='EditorButton'><FontAwesomeIcon icon={faFastForward}/></Button>    \r\n                    </div>\r\n                </div>\r\n                <div style={{height:'calc(100% - 55px'}}>\r\n                    <CodeMirror \r\n                        value={this.state.code} \r\n                        onBeforeChange={this.updateCode}\r\n                        options = {{\r\n                            mode: 'tm-custom',\r\n                            theme: 'xq-light',\r\n                            lineNumbers: true\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Editor","import React from 'react';\nimport Display from './Components/Display';\nimport Editor from './Components/Editor';\nimport './App.css'\n\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Display/>\n      {/* <hr/> */}\n      <Editor/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}